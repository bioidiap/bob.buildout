# This build file heavily uses template features from YAML so it is generic
# enough for any Bob project. Don't modify it unless you know what you're
# doing.


# Definition of our build pipeline
stages:
  - conda
  - docs
  - deploy


# Template for (latest) documentation upload stage
# Only one real job needs to do this
.docs_template: &docs_job
  stage: docs
  environment: intranet
  only:
    - master
  before_script:
    - ./_ci/install.sh _ci #updates
    - ./_ci/before_docs.sh
  script:
    - ./_ci/docs.sh
  after_script:
    - ./_ci/after_docs.sh

# Template for the conda package creation stage
.conda_template: &conda_job
  stage: conda
  variables: &conda_variables
    UPLOAD_URL: "http://www.idiap.ch/software/bob/conda"
    UPLOAD_URL_BETA: "http://www.idiap.ch/private/conda"
    CONDA_NPY: "111"
    PYTHONUNBUFFERED: "1"
    CONDA_ENVS_PATH: "conda-env"
    CONDA_BLD_PATH: "conda-env"
  image: continuumio/conda_builder_linux
  cache:
    key: "$CI_BUILD_NAME"
    paths:
      - conda-env/.pkgs/*.tar.bz2
      - conda-env/.pkgs/urls.txt
      - conda-env/src_cache

conda_intranet_linux_27:
  <<: *conda_job
  before_script:
    - export PATH=/opt/miniconda/bin:$PATH
    - export BOB_PACKAGE_VERSION=`cat version.txt`
    - hash -r
    - conda update -n root --yes --quiet conda conda-build
    - conda config --set always_yes true
    - conda config --set show_channel_urls true
    - conda config --add channels defaults
    - conda config --add channels ${UPLOAD_URL}
    - conda config --add channels ${UPLOAD_URL_BETA}
    - conda config --set ssl_verify false
    - conda clean --lock
    - cp conda_build_config.yaml $HOME/conda_build_config.yaml
    - conda info
    - ./channel_support.py ${UPLOAD_URL_BETA} ${CI_PROJECT_NAME} ${BOB_PACKAGE_VERSION} ${PYTHON_VERSION} -u --log ./build_number.txt
    - export BOB_BUILD_NUMBER=`head -n 1 build_number.txt`
  script:
    - conda-build --python=${PYTHON_VERSION} --skip-existing conda
    - curl --location --silent --show-error --user "${DOCUSER}:${DOCPASS}" --upload-file `conda-build --python=${PYTHON_VERSION} conda --output` "${UPLOAD_URL_BETA}-upload/${OS_SLUG}/"
    # delete old beta packages
    - for url in `tail -n +2 build_number.txt`; do curl --location --silent --show-error --user "${DOCUSER}:${DOCPASS}" -X DELETE "${url/${UPLOAD_URL_BETA}/${UPLOAD_URL_BETA}-upload}"; done
  variables:
    <<: *conda_variables
    PYTHON_VERSION: "2.7"
    OS_SLUG: "linux-64"
  tags:
    - docker
  environment: intranet
  only:
    - master
    - condapackage
  except:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)

conda_internet_linux_27:
  <<: *conda_job
  before_script: &conda_before_script
    - export PATH=/opt/miniconda/bin:$PATH
    - export BOB_PACKAGE_VERSION=`cat version.txt`
    - hash -r
    - conda update -n root --yes --quiet conda conda-build
    - conda config --set always_yes true
    - conda config --set show_channel_urls true
    - conda config --add channels defaults
    - conda config --add channels ${UPLOAD_URL}
    - conda config --set ssl_verify false
    - conda install --quiet --yes curl
    - conda clean --lock
    - cp conda_build_config.yaml $HOME/conda_build_config.yaml
    - conda info
    - ./channel_support.py ${UPLOAD_URL_BETA} ${CI_PROJECT_NAME} ${BOB_PACKAGE_VERSION} ${PYTHON_VERSION} -u --log ./build_number.txt
    - export BOB_BUILD_NUMBER=`head -n 1 build_number.txt`
  script:
    - conda-build --python=${PYTHON_VERSION} --skip-existing conda
    - curl --location --silent --show-error --user "${DOCUSER}:${DOCPASS}" --upload-file `conda-build --python=${PYTHON_VERSION} conda --output` "${UPLOAD_URL}-upload/${OS_SLUG}/"
  variables:
    <<: *conda_variables
    PYTHON_VERSION: "2.7"
    OS_SLUG: "linux-64"
  tags:
    - docker
  environment: internet
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
  except:
    - branches

# conda_macosx_35:
#   <<: *conda_job
#   variables:
#     <<: *conda_variables
#     PYTHON_VERSION: "3.5"
#     OS_SLUG: "osx-64"
#   tags:
#     - conda-macosx

# Template for the deployment stage - re-installs from uploaded wheels
# Needs to run on a single architecture only
# Will deploy your package to PyPI and other required services
# Only runs for tags
.deploy_template: &deploy_job
  stage: deploy
  environment: internet
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
  except:
    - branches
  before_script:
    - ./_ci/install.sh _ci #updates
    - ./_ci/before_deploy.sh
  script:
    - ./_ci/deploy.sh
  after_script:
    - ./_ci/after_deploy.sh


